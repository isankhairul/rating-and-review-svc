// Code generated by mockery v2.16.0. DO NOT EDIT.

package repository_mock

import (
	base "go-klikdokter/app/model/base"
	entity "go-klikdokter/app/model/entity"

	mock "github.com/stretchr/testify/mock"

	primitive "go.mongodb.org/mongo-driver/bson/primitive"

	publicrequest "go-klikdokter/app/model/request/public"

	publicresponse "go-klikdokter/app/model/response/public"

	request "go-klikdokter/app/model/request"
)

// RatingMpRepository is an autogenerated mock type for the RatingMpRepository type
type RatingMpRepository struct {
	mock.Mock
}

// CountRatingSubsByRatingIdAndValue provides a mock function with given fields: ratingId, value
func (_m *RatingMpRepository) CountRatingSubsByRatingIdAndValue(ratingId string, value string) (int64, error) {
	ret := _m.Called(ratingId, value)

	var r0 int64
	if rf, ok := ret.Get(0).(func(string, string) int64); ok {
		r0 = rf(ratingId, value)
	} else {
		r0 = ret.Get(0).(int64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(ratingId, value)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateRating provides a mock function with given fields: input
func (_m *RatingMpRepository) CreateRating(input request.SaveRatingRequest) (*entity.RatingsMpCol, error) {
	ret := _m.Called(input)

	var r0 *entity.RatingsMpCol
	if rf, ok := ret.Get(0).(func(request.SaveRatingRequest) *entity.RatingsMpCol); ok {
		r0 = rf(input)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.RatingsMpCol)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(request.SaveRatingRequest) error); ok {
		r1 = rf(input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateRatingSubmission provides a mock function with given fields: input
func (_m *RatingMpRepository) CreateRatingSubmission(input []request.SaveRatingSubmissionMp) (*[]entity.RatingSubmissionMp, error) {
	ret := _m.Called(input)

	var r0 *[]entity.RatingSubmissionMp
	if rf, ok := ret.Get(0).(func([]request.SaveRatingSubmissionMp) *[]entity.RatingSubmissionMp); ok {
		r0 = rf(input)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]entity.RatingSubmissionMp)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func([]request.SaveRatingSubmissionMp) error); ok {
		r1 = rf(input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteRating provides a mock function with given fields: id
func (_m *RatingMpRepository) DeleteRating(id primitive.ObjectID) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(primitive.ObjectID) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindRatingBySourceUIDAndRatingType provides a mock function with given fields: sourceUID, ratingType
func (_m *RatingMpRepository) FindRatingBySourceUIDAndRatingType(sourceUID string, ratingType string) (*entity.RatingsMpCol, error) {
	ret := _m.Called(sourceUID, ratingType)

	var r0 *entity.RatingsMpCol
	if rf, ok := ret.Get(0).(func(string, string) *entity.RatingsMpCol); ok {
		r0 = rf(sourceUID, ratingType)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.RatingsMpCol)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(sourceUID, ratingType)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindRatingSubmissionBySourceTransID provides a mock function with given fields: sourceTransId
func (_m *RatingMpRepository) FindRatingSubmissionBySourceTransID(sourceTransId string) (*entity.RatingSubmissionMp, error) {
	ret := _m.Called(sourceTransId)

	var r0 *entity.RatingSubmissionMp
	if rf, ok := ret.Get(0).(func(string) *entity.RatingSubmissionMp); ok {
		r0 = rf(sourceTransId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.RatingSubmissionMp)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(sourceTransId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindRatingSubmissionByUserIDAndRatingID provides a mock function with given fields: userId, ratingId, sourceTransId
func (_m *RatingMpRepository) FindRatingSubmissionByUserIDAndRatingID(userId *string, ratingId string, sourceTransId string) (*entity.RatingSubmissionMp, error) {
	ret := _m.Called(userId, ratingId, sourceTransId)

	var r0 *entity.RatingSubmissionMp
	if rf, ok := ret.Get(0).(func(*string, string, string) *entity.RatingSubmissionMp); ok {
		r0 = rf(userId, ratingId, sourceTransId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.RatingSubmissionMp)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*string, string, string) error); ok {
		r1 = rf(userId, ratingId, sourceTransId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindRatingTypeNumByRatingType provides a mock function with given fields: ratingType
func (_m *RatingMpRepository) FindRatingTypeNumByRatingType(ratingType string) (*entity.RatingTypesNumCol, error) {
	ret := _m.Called(ratingType)

	var r0 *entity.RatingTypesNumCol
	if rf, ok := ret.Get(0).(func(string) *entity.RatingTypesNumCol); ok {
		r0 = rf(ratingType)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.RatingTypesNumCol)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(ratingType)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindRatingTypeNumByRatingTypeID provides a mock function with given fields: ratingTypeID
func (_m *RatingMpRepository) FindRatingTypeNumByRatingTypeID(ratingTypeID primitive.ObjectID) (*entity.RatingTypesNumCol, error) {
	ret := _m.Called(ratingTypeID)

	var r0 *entity.RatingTypesNumCol
	if rf, ok := ret.Get(0).(func(primitive.ObjectID) *entity.RatingTypesNumCol); ok {
		r0 = rf(ratingTypeID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.RatingTypesNumCol)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(primitive.ObjectID) error); ok {
		r1 = rf(ratingTypeID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetListRatingSubmissions provides a mock function with given fields: filter, page, limit, sort, dir
func (_m *RatingMpRepository) GetListRatingSubmissions(filter request.RatingSubmissionMpFilter, page int, limit int64, sort string, dir interface{}) ([]entity.RatingSubmissionMp, *base.Pagination, error) {
	ret := _m.Called(filter, page, limit, sort, dir)

	var r0 []entity.RatingSubmissionMp
	if rf, ok := ret.Get(0).(func(request.RatingSubmissionMpFilter, int, int64, string, interface{}) []entity.RatingSubmissionMp); ok {
		r0 = rf(filter, page, limit, sort, dir)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.RatingSubmissionMp)
		}
	}

	var r1 *base.Pagination
	if rf, ok := ret.Get(1).(func(request.RatingSubmissionMpFilter, int, int64, string, interface{}) *base.Pagination); ok {
		r1 = rf(filter, page, limit, sort, dir)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*base.Pagination)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(request.RatingSubmissionMpFilter, int, int64, string, interface{}) error); ok {
		r2 = rf(filter, page, limit, sort, dir)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetPublicRatingsByParams provides a mock function with given fields: limit, page, dir, sort, filter
func (_m *RatingMpRepository) GetPublicRatingsByParams(limit int, page int, dir int, sort string, filter publicrequest.FilterRatingSummary) ([]entity.RatingsMpCol, *base.Pagination, error) {
	ret := _m.Called(limit, page, dir, sort, filter)

	var r0 []entity.RatingsMpCol
	if rf, ok := ret.Get(0).(func(int, int, int, string, publicrequest.FilterRatingSummary) []entity.RatingsMpCol); ok {
		r0 = rf(limit, page, dir, sort, filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.RatingsMpCol)
		}
	}

	var r1 *base.Pagination
	if rf, ok := ret.Get(1).(func(int, int, int, string, publicrequest.FilterRatingSummary) *base.Pagination); ok {
		r1 = rf(limit, page, dir, sort, filter)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*base.Pagination)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(int, int, int, string, publicrequest.FilterRatingSummary) error); ok {
		r2 = rf(limit, page, dir, sort, filter)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetRatingById provides a mock function with given fields: id
func (_m *RatingMpRepository) GetRatingById(id primitive.ObjectID) (*entity.RatingsMpCol, error) {
	ret := _m.Called(id)

	var r0 *entity.RatingsMpCol
	if rf, ok := ret.Get(0).(func(primitive.ObjectID) *entity.RatingsMpCol); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.RatingsMpCol)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(primitive.ObjectID) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRatingByRatingTypeSourceUidAndSourceType provides a mock function with given fields: ratingTypeId, sourceUid, sourceType
func (_m *RatingMpRepository) GetRatingByRatingTypeSourceUidAndSourceType(ratingTypeId string, sourceUid string, sourceType string) (*entity.RatingsMpCol, error) {
	ret := _m.Called(ratingTypeId, sourceUid, sourceType)

	var r0 *entity.RatingsMpCol
	if rf, ok := ret.Get(0).(func(string, string, string) *entity.RatingsMpCol); ok {
		r0 = rf(ratingTypeId, sourceUid, sourceType)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.RatingsMpCol)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, string) error); ok {
		r1 = rf(ratingTypeId, sourceUid, sourceType)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRatingFormulaByRatingTypeIdAndSourceType provides a mock function with given fields: ratingTypeId, sourceType
func (_m *RatingMpRepository) GetRatingFormulaByRatingTypeIdAndSourceType(ratingTypeId string, sourceType string) (*entity.RatingFormulaCol, error) {
	ret := _m.Called(ratingTypeId, sourceType)

	var r0 *entity.RatingFormulaCol
	if rf, ok := ret.Get(0).(func(string, string) *entity.RatingFormulaCol); ok {
		r0 = rf(ratingTypeId, sourceType)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.RatingFormulaCol)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(ratingTypeId, sourceType)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRatingSubmissionById provides a mock function with given fields: id
func (_m *RatingMpRepository) GetRatingSubmissionById(id primitive.ObjectID) (*entity.RatingSubmissionMp, error) {
	ret := _m.Called(id)

	var r0 *entity.RatingSubmissionMp
	if rf, ok := ret.Get(0).(func(primitive.ObjectID) *entity.RatingSubmissionMp); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.RatingSubmissionMp)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(primitive.ObjectID) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRatingSubmissionByIdAndUser provides a mock function with given fields: id, userIDLegacy
func (_m *RatingMpRepository) GetRatingSubmissionByIdAndUser(id primitive.ObjectID, userIDLegacy string) (*entity.RatingSubmissionMp, error) {
	ret := _m.Called(id, userIDLegacy)

	var r0 *entity.RatingSubmissionMp
	if rf, ok := ret.Get(0).(func(primitive.ObjectID, string) *entity.RatingSubmissionMp); ok {
		r0 = rf(id, userIDLegacy)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.RatingSubmissionMp)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(primitive.ObjectID, string) error); ok {
		r1 = rf(id, userIDLegacy)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRatingSubmissionByRatingId provides a mock function with given fields: id
func (_m *RatingMpRepository) GetRatingSubmissionByRatingId(id string) (*entity.RatingSubmissionMp, error) {
	ret := _m.Called(id)

	var r0 *entity.RatingSubmissionMp
	if rf, ok := ret.Get(0).(func(string) *entity.RatingSubmissionMp); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.RatingSubmissionMp)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRatingTypeLikertByIdAndStatus provides a mock function with given fields: id
func (_m *RatingMpRepository) GetRatingTypeLikertByIdAndStatus(id primitive.ObjectID) (*entity.RatingTypesLikertCol, error) {
	ret := _m.Called(id)

	var r0 *entity.RatingTypesLikertCol
	if rf, ok := ret.Get(0).(func(primitive.ObjectID) *entity.RatingTypesLikertCol); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.RatingTypesLikertCol)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(primitive.ObjectID) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRatingTypeNumByIdAndStatus provides a mock function with given fields: id
func (_m *RatingMpRepository) GetRatingTypeNumByIdAndStatus(id primitive.ObjectID) (*entity.RatingTypesNumCol, error) {
	ret := _m.Called(id)

	var r0 *entity.RatingTypesNumCol
	if rf, ok := ret.Get(0).(func(primitive.ObjectID) *entity.RatingTypesNumCol); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.RatingTypesNumCol)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(primitive.ObjectID) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRatingsByParams provides a mock function with given fields: limit, page, dir, sort, filter
func (_m *RatingMpRepository) GetRatingsByParams(limit int, page int, dir int, sort string, filter request.RatingFilter) ([]entity.RatingsMpCol, *base.Pagination, error) {
	ret := _m.Called(limit, page, dir, sort, filter)

	var r0 []entity.RatingsMpCol
	if rf, ok := ret.Get(0).(func(int, int, int, string, request.RatingFilter) []entity.RatingsMpCol); ok {
		r0 = rf(limit, page, dir, sort, filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.RatingsMpCol)
		}
	}

	var r1 *base.Pagination
	if rf, ok := ret.Get(1).(func(int, int, int, string, request.RatingFilter) *base.Pagination); ok {
		r1 = rf(limit, page, dir, sort, filter)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*base.Pagination)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(int, int, int, string, request.RatingFilter) error); ok {
		r2 = rf(limit, page, dir, sort, filter)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetSumCountRatingSubsByRatingId provides a mock function with given fields: ratingId
func (_m *RatingMpRepository) GetSumCountRatingSubsByRatingId(ratingId string) (*publicresponse.PublicSumCountRatingSummaryMp, error) {
	ret := _m.Called(ratingId)

	var r0 *publicresponse.PublicSumCountRatingSummaryMp
	if rf, ok := ret.Get(0).(func(string) *publicresponse.PublicSumCountRatingSummaryMp); ok {
		r0 = rf(ratingId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*publicresponse.PublicSumCountRatingSummaryMp)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(ratingId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateRating provides a mock function with given fields: id, input
func (_m *RatingMpRepository) UpdateRating(id primitive.ObjectID, input request.BodyUpdateRatingRequest) (*entity.RatingsMpCol, error) {
	ret := _m.Called(id, input)

	var r0 *entity.RatingsMpCol
	if rf, ok := ret.Get(0).(func(primitive.ObjectID, request.BodyUpdateRatingRequest) *entity.RatingsMpCol); ok {
		r0 = rf(id, input)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.RatingsMpCol)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(primitive.ObjectID, request.BodyUpdateRatingRequest) error); ok {
		r1 = rf(id, input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateRatingSubmission provides a mock function with given fields: input, id
func (_m *RatingMpRepository) UpdateRatingSubmission(input entity.RatingSubmissionMp, id primitive.ObjectID) error {
	ret := _m.Called(input, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(entity.RatingSubmissionMp, primitive.ObjectID) error); ok {
		r0 = rf(input, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewRatingMpRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewRatingMpRepository creates a new instance of RatingMpRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewRatingMpRepository(t mockConstructorTestingTNewRatingMpRepository) *RatingMpRepository {
	mock := &RatingMpRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

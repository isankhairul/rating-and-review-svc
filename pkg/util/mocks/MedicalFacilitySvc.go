// Code generated by mockery v2.12.3. DO NOT EDIT.

package mocks

import (
	util "go-klikdokter/pkg/util"

	mock "github.com/stretchr/testify/mock"
)

// MedicalFacilitySvc is an autogenerated mock type for the MedicalFacilitySvc type
type MedicalFacilitySvc struct {
	mock.Mock
}

// CallGetDetailMedicalFacility provides a mock function with given fields: uid
func (_m *MedicalFacilitySvc) CallGetDetailMedicalFacility(uid string) (*util.ResponseHttp, error) {
	ret := _m.Called(uid)

	var r0 *util.ResponseHttp
	if rf, ok := ret.Get(0).(func(string) *util.ResponseHttp); ok {
		r0 = rf(uid)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*util.ResponseHttp)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(uid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type NewMedicalFacilitySvcT interface {
	mock.TestingT
	Cleanup(func())
}

// NewMedicalFacilitySvc creates a new instance of MedicalFacilitySvc. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMedicalFacilitySvc(t NewMedicalFacilitySvcT) *MedicalFacilitySvc {
	mock := &MedicalFacilitySvc{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
